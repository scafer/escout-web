@page "/boards"

<h3>Boards</h3>

<EditForm Model="@searchQuery" OnValidSubmit="@SearchClicked">
    <div class="form-group row">
        <InputSelect @bind-Value="searchQuery.FieldName" class="form-control col-lg-2 m-1">
            <option value="">Select...</option>
            <option value="name">Name</option>
            <option value="edition">Edition</option>
            <option value="favorites">Favorites</option>
        </InputSelect>
        <InputText @bind-Value="searchQuery.Value" placeholder="Search..." class="form-control col-lg  m-1" />
        <button class="btn btn-primary col-lg-1  m-1" value="Save">Search</button>
        <button class="btn btn-primary col-lg-1  m-1" @onclick="NewBoardClicked">New</button>
    </div>
</EditForm>
<br />

@if (isLoading)
{
<div class="spinner"></div> }
            else
            {
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Edition</th>
            <th>Details</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var competition in competitions)
        {
<tr>
    <td>@competition.Id</td>
    <td>@competition.Name</td>
    <td>@competition.Edition</td>
    <td><button @onclick="@(() => BoardDetails(competition))" class="btn btn-secondary">+</button></td>
</tr>
}
    </tbody>
</table>}

@code {
    private bool isLoading = false;
    private BoardsService boardsService;
    private List<Competition> competitions;
    private SearchQuery searchQuery = new SearchQuery();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Start();
    }

    private async void Start()
    {
        isLoading = true;
        boardsService = new BoardsService(await localStorage.GetItemAsync<string>(Utils.TOKEN));
        competitions = await boardsService.SearchExecuted(null, null);
        competitions = competitions.OrderBy(c => c.Id).ToList();
        isLoading = false;
        base.StateHasChanged();
    }

    private void NewBoardClicked() => Modal.Show<NewCompetitionPage>("New Competition");

    private async Task SearchClicked()
    {
        isLoading = true;
        competitions = await boardsService.SearchExecuted(searchQuery.FieldName, searchQuery.Value);
        competitions = competitions.OrderBy(c => c.Id).ToList();
        isLoading = false;
    }

    private void BoardDetails(Competition competition)
    {
        navigationManager.NavigateTo($"/boards/{competition.Id}");
    }
}
