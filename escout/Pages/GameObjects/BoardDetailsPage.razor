@page "/boards/{id}"

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-10">
                <h3></h3>
            </div>
            <div class="col-2">
                @if (!isEditing)
                {
                    <button class="btn btn-info" @onclick="FavoriteToogle">Favorite</button>
                    <button class="btn btn-dark" @onclick="IsEditingToggle">Edit</button>
                    <button class="btn btn-danger" @onclick="DeleteClicked">Delete</button>
                }
                else
                {
                    <button class="btn btn-dark" @onclick="IsEditingToggle">Cancel</button>
                    <button class="btn btn-success" @onclick="SaveClicked">Save</button>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-lg-3 justify-content-center">
                <img class="bg-transparent img-thumbnail" src="@(image.ImageUrl)" alt="@(image.Description)" style="height:100%;" />
            </div>
            <div class="col-9">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="font-weight-bold">@competition.Name</h3>
                        <h5></h5>
                        <h6 class="text-info">@competition.Edition</h6>
                        <div class="col-9"><hr /></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <h4 class="font-weight-bold">Competition Details</h4>
                        <div class="row">
                            <div class="col-6">
                                <h6>Name:</h6>
                                <h6>Edition:</h6>
                                <h6>Total games:*</h6>
                                <h6>Faults:*</h6>
                                <h6>Shots:*</h6>
                            </div>
                            <div class="col-6">
                                @if (!isEditing)
                                {
                                    <h6 class="text-info">@competition.Name</h6>
                                    <h6 class="text-info">@competition.Edition</h6>
                                }
                                else
                                {
                                    <input @bind-value="competition.Name" />
                                    <input @bind-value="competition.Edition" />
                                }
                                <h6 class="text-info">0</h6>
                                <h6 class="text-info">0</h6>
                                <h6 class="text-info">0</h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row"><div class="col-12"><hr /></div></div>
        <!-- Profile separator from games history -->
        <div class="row">
            <div class="col-12">
                <h3 class="font-weight-bold">Competition Board</h3>
            </div>
            <div class="col-12">
                <div class="center">
                    @*<button class="btn btn-warning m-5" @onclick="LoadStatistics">Load</button>*@
                </div>

                <table class="table">
                    <thead>
                        <tr>
                            <th>Position</th>
                            <th>Club Name</th>
                            <th>Points</th>
                            <th>Played</th>
                            <th>Won</th>
                            <th>Drawn</th>
                            <th>Lost</th>
                            <th>Goals For</th>
                            <th>Goals Against</th>
                            <th>Goals Difference</th>
                            @if (isEditing)
                            {
                                <th>Delete</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var board in competitionBoard)
                        {
                            <tr>
                                @if (!isEditing)
                                {
                                    <td>@board.Position</td>
                                    <td>@board.DisplayOptions.GetValueOrDefault("clubName")</td>
                                    <td>@board.Points</td>
                                    <td>@board.Played</td>
                                    <td>@board.Won</td>
                                    <td>@board.Drawn</td>
                                    <td>@board.Lost</td>
                                    <td>@board.GoalsFor</td>
                                    <td>@board.GoalsAgainst</td>
                                    <td>@board.GoalsDifference</td>
                                }
                                else
                                {
                                    <td><input @bind-value="board.Position" class="col-lg" /></td>
                                    <td>@board.DisplayOptions.GetValueOrDefault("clubName")</td>
                                    <td><input @bind-value="board.Points" class="col-lg" /></td>
                                    <td><input @bind-value="board.Played" class="col-lg" /></td>
                                    <td><input @bind-value="board.Won" class="col-lg" /></td>
                                    <td><input @bind-value="board.Drawn" class="col-lg" /></td>
                                    <td><input @bind-value="board.Lost" class="col-lg" /></td>
                                    <td><input @bind-value="board.GoalsFor" class="col-lg" /></td>
                                    <td><input @bind-value="board.GoalsAgainst" class="col-lg" /></td>
                                    <td><input @bind-value="board.GoalsDifference" class="col-lg" /></td>
                                    <td><button @onclick="@(() => RemoveCompetitionBoardEntryClicked(board))" class="btn btn-danger col-lg">-</button></td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                @if (isEditing)
                {
                    <div class="col-12">
                        <h4 class="font-weight-bold">New Entry</h4>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Position</th>
                                <th>Club Name</th>
                                <th>Points</th>
                                <th>Played</th>
                                <th>Won</th>
                                <th>Drawn</th>
                                <th>Lost</th>
                                <th>Goals For</th>
                                <th>Goals Against</th>
                                <th>Goals Difference</th>
                                <th>Save</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><input @bind-value="boardEntry.Position" /></td>
                                <td>
                                    <select @bind="boardEntry.ClubId" class="form-control">
                                        @if (clubs != null)
                                        {
                                            @foreach (var c in clubs)
                                            {
                                                <option value="@c.Id">@c.Name</option>
                                            }
                                        }
                                    </select>
                                </td>
                                <td><input @bind-value="boardEntry.Points" class="col-lg" /></td>
                                <td><input @bind-value="boardEntry.Played" class="col-lg" /></td>
                                <td><input @bind-value="boardEntry.Won" class="col-lg" /></td>
                                <td><input @bind-value="boardEntry.Drawn" class="col-lg" /></td>
                                <td><input @bind-value="boardEntry.Lost" class="col-lg" /></td>
                                <td><input @bind-value="boardEntry.GoalsFor" class="col-lg" /></td>
                                <td><input @bind-value="boardEntry.GoalsAgainst" class="col-lg" /></td>
                                <td><input @bind-value="boardEntry.GoalsDifference" class="col-lg" /></td>
                                <td><button @onclick="@(() => CreateCompetitionBoardEntryClicked())" class="btn btn-success col-lg">+</button></td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private bool isLoading = true;
    private bool isEditing = false;

    private BoardsService boardsService;
    private FavoritesService favoritesService;
    private Image image = new Image();
    public List<Club> clubs = new List<Club>();
    private Competition competition = new Competition();
    private CompetitionBoard boardEntry = new CompetitionBoard();
    private List<CompetitionBoard> competitionBoard = new List<CompetitionBoard>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _ = Start(Id);
        _ = LoadClubsList();
    }

    private async Task Start(string competitionId)
    {
        favoritesService = new FavoritesService(await localStorage.GetItemAsync<string>(ConstValues.TOKEN));
        boardsService = new BoardsService(await localStorage.GetItemAsync<string>(ConstValues.TOKEN));

        competition = await boardsService.GetCompetitionById(int.Parse(competitionId));
        competitionBoard = await boardsService.GetCompetitionBoardById(int.Parse(competitionId));

        competitionBoard = competitionBoard.OrderBy(c => c.Id).ToList();
        image = competition.DisplayOptions.ContainsKey("imageUrl") ? new Image { ImageUrl = competition.DisplayOptions["imageUrl"] } : new Image { ImageUrl = "/images/competition_fill-BLUE.svg" };

        isLoading = false;
        base.StateHasChanged();
    }

    private async Task SaveClicked()
    {
        var response = await boardsService.UpdateCompetition(competition);

        foreach (var c in competitionBoard)
        {
            _ = boardsService.UpdateCompetitionBoard(c);
        }

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Error, ConstValues.MSG_GENERIC_ERROR);
        }
        else
        {
            toastService.ShowToast(ToastLevel.Success, "Athlete updated");
            isEditing = false;
        }
    }

    private async Task CreateCompetitionBoardEntryClicked()
    {
        boardEntry.CompetitionId = competition.Id;
        var response = await boardsService.CreateCompetitionBoard(boardEntry);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Success, "Entry added");
            competitionBoard.Add(JsonConvert.DeserializeObject<List<CompetitionBoard>>(await response.Content.ReadAsStringAsync())[0]);
            boardEntry = new CompetitionBoard();
            base.StateHasChanged();
        }
        else
        {
            toastService.ShowToast(ToastLevel.Error, ConstValues.MSG_GENERIC_ERROR);
        }
    }


    private async Task DeleteClicked()
    {
        var response = await boardsService.DeleteCompetition(competition.Id);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Error, ConstValues.MSG_GENERIC_ERROR);
        }
        else
        {
            toastService.ShowToast(ToastLevel.Success, "Competition deleted");
            Task.Delay(3000).Wait();
            navigationManager.NavigateTo($"/boards");
        }
    }

    private async Task RemoveCompetitionBoardEntryClicked(CompetitionBoard entry)
    {
        var response = await boardsService.DeleteCompetitionBoard(entry.Id);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Success, "Entry deleted");
            competitionBoard.Remove(entry);
            base.StateHasChanged();
        }
        else
        {
            toastService.ShowToast(ToastLevel.Error, ConstValues.MSG_GENERIC_ERROR);
        }
    }

    private async Task FavoriteToogle()
    {
        var response = await favoritesService.ToogleFavorite(new Favorite(int.Parse(Id)));

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Success, ConstValues.MSG_GENERIC_UPDATED);
            isEditing = false;
        }
        else
        {
            toastService.ShowToast(ToastLevel.Error, ConstValues.MSG_GENERIC_ERROR);
        }
    }

    private void ClubDetails(int id)
    {
        navigationManager.NavigateTo($"/clubs/{id}");
    }

    private void IsEditingToggle()
    {
        isEditing = isEditing ? false : true;
    }

    private async Task LoadClubsList()
    {
        clubs.Add(new Club { Name = "Select..." });
        clubs.AddRange(await new RestUtils(await localStorage.GetItemAsync<string>(ConstValues.TOKEN)).GetClubs());
    }
}
