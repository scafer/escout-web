@page "/athletes"

<h3>Athletes</h3>

<EditForm Model="@searchQuery" OnValidSubmit="@SearchClicked">
    <div class="form-group row">
        <InputSelect @bind-Value="searchQuery.FieldName" class="form-control col-lg-2  m-1">
            <option value="">Select...</option>
            <option value="name">Name</option>
            <option value="fullname">Fullname</option>
            <option value="favorites">Favorites</option>
        </InputSelect>
        <InputText @bind-Value="searchQuery.Value" placeholder="Search..." class="form-control col-lg  m-1" />
        <button class="btn btn-primary col-lg-1  m-1" value="Save">Search</button>
        <button class="btn btn-primary col-lg-1  m-1" @onclick="NewAthleteClicked">New</button>
    </div>
</EditForm>
<br />

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Fullname</th>
                <th>CitizenShip</th>
                <th>Position</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var athlete in athletes)
            {
                <tr>
                    <td>@athlete.Id</td>
                    <td>@athlete.Name</td>
                    <td>@athlete.Fullname</td>
                    <td>@athlete.Citizenship</td>
                    <td>@athlete.Position</td>
                    <td><button @onclick="@(() => AthleteDetails(athlete))" class="btn btn-secondary">+</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = true;
    private List<Athlete> athletes;
    private AthleteService athletesService;
    private SearchQuery searchQuery = new SearchQuery();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Start();
    }

    private async void Start()
    {
        athletesService = new AthleteService(await localStorage.GetItemAsync<string>(ConstValues.TOKEN));
        athletes = await athletesService.SearchExecuted(null, null);
        athletes = athletes.OrderBy(c => c.Id).ToList();
        isLoading = false;
        base.StateHasChanged();
    }

    private void NewAthleteClicked()
    {
        Modal.Show<NewAthletePage>(string.Format(ConstValues.MSG_GENERIC_OBJECT_NEW, "Athlete"));
    }

    private void AthleteDetails(Athlete athlete)
    {
        navigationManager.NavigateTo($"/athletes/{athlete.Id}");
    }

    private async Task SearchClicked()
    {
        isLoading = true;
        athletes = await athletesService.SearchExecuted(searchQuery.FieldName, searchQuery.Value);
        athletes = athletes.OrderBy(c => c.Id).ToList();
        isLoading = false;
    }
}
