@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <div class="center">
        <EditForm Model="@club" OnValidSubmit="@NewClubClicked">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Name:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Name" placeholder="Name" class="form-control" />
                </div>
            </div>
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Fullname:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Fullname" placeholder="Fullname" class="form-control" />
                </div>
            </div>
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Country:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Country" placeholder="Country" class="form-control" />
                </div>
            </div>
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Founded:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Founded" placeholder="Founded" class="form-control" />
                </div>
            </div>
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Colors:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Colors" placeholder="Colors" class="form-control" />
                </div>
            </div>
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Members:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Members" placeholder="Members" class="form-control" />
                </div>
            </div>
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Stadium:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Stadium" placeholder="Stadium" class="form-control" />
                </div>
            </div>
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Address:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Address" placeholder="Address" class="form-control" />
                </div>
            </div>
            <div class="row justify-content-start">
                <div class="col-5 font-weight-bold">
                    <label class="label-right-align">Home Page:</label>
                </div>
                <div class="col-7 mb-1">
                    <InputText @bind-Value="club.Homepage" placeholder="Home Page" class="form-control" />
                </div>
            </div>
            <br />
            <div>
                <button class="btn btn-primary" value="Save">Save</button>
                <span>&nbsp;</span>
                <button @onclick="Cancel" class="btn btn-secondary" value="Clear">Cancel</button>
            </div>
        </EditForm>
    </div>
}

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    private bool isLoading = false;
    public Club club;
    private ClubService clubService;

    private void Cancel()
    {
        BlazoredModal.CancelAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Start();
    }

    private async void Start()
    {
        club = new Club();
        clubService = new ClubService(await localStorage.GetItemAsync<string>(ConstValues.TOKEN));
    }

    private async Task NewClubClicked()
    {
        isLoading = true;
        var response = await clubService.CreateClub(club);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Success, string.Format(ConstValues.MSG_GENERIC_OBJECT_SAVED, "Club"));
            await BlazoredModal.CloseAsync(ModalResult.Ok(true));
        }
        else
        {
            toastService.ShowToast(ToastLevel.Error, string.Format(ConstValues.MSG_ERROR_CREATING_OBJECT, "club"));
        }

        isLoading = false;
    }
}
