@page "/games/{id}"

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-10">
                <h3></h3>
            </div>
            <div class="col-2">
                @if (!isEditing)
                {
                    <button class="btn btn-info" @onclick="ToogleFavorite">Favorite</button>
                    <button class="btn btn-dark" @onclick="ToggleIsEditing">Edit</button>
                    <button class="btn btn-danger" @onclick="DeleteClicked">Delete</button>
                }
                else
                {
                    <button class="btn btn-dark" @onclick="ToggleIsEditing">Cancel</button>
                    <button class="btn btn-success" @onclick="SaveClicked">Save</button>
                }
            </div>
        </div>
        <div class="row text-center">
            <div class="col-lg-3 justify-content-center">
                <img class="bg-transparent img-thumbnail" src="@(homeTeamImage.ImageUrl)" alt="@(homeTeamImage.Description)" style="height:80%;" />
                <h4 class="font-weight-bold">@homeTeam.Name</h4>
                <h4 class="font-weight-bold">@gameData.Game.HomeScore</h4>
            </div>
            <div class="col-lg-3 justify-content-center">
                <h4 class="font-weight-bold">Game Details</h4>
                <div class="row">
                    <div class="col-6">
                        <h6>Type:</h6>
                        <h6>Status:</h6>
                        <h6>Location:</h6>
                        <br />
                        <h6>Time Start:</h6>
                        <h6>Time End:</h6>
                        <br />
                        <h6>Home Score:</h6>
                        <h6>Visitor Score:</h6>
                    </div>
                    <div class="col-6">
                        @if (!isEditing)
                        {
                            <h6 class="text-info">@gameData.Game.Type</h6>
                            <h6 class="text-info">@gameData.Game.Status</h6>
                            <h6 class="text-info">@gameData.Game.Location</h6>
                            <br />
                            <h6 class="text-info">@gameData.Game.TimeStart</h6>
                            <h6 class="text-info">@gameData.Game.TimeEnd</h6>
                            <br />
                            <h6 class="text-info">@gameData.Game.HomeScore</h6>
                            <h6 class="text-info">@gameData.Game.VisitorScore</h6>
                        }
                        else
                        {
                            <input @bind-value="gameData.Game.Type" />
                            <input @bind-value="gameData.Game.Status" />
                            <input @bind-value="gameData.Game.Location" />
                            <br />
                            <input @bind-value="gameData.Game.TimeStart" />
                            <input @bind-value="gameData.Game.TimeEnd" />
                            <br />
                            <input @bind-value="gameData.Game.HomeScore" />
                            <input @bind-value="gameData.Game.VisitorScore" />
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-3 justify-content-center">
                <img class="bg-transparent img-thumbnail" src="@(visitorTeamImage.ImageUrl)" alt="@(visitorTeamImage.Description)" style="height:80%;" />
                <h4 class="font-weight-bold">@visitorTeam.Name</h4>
                <h4 class="font-weight-bold">@gameData.Game.VisitorScore</h4>
            </div>
        </div>
        <hr />
        <div>
            <h4 class="font-weight-bold text-center">Athletes</h4>
            <br />
            <div class="row">
                <div class="col-6">
                    <h4 class="font-weight-bold">@homeTeam.Name</h4>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var athlete in homeTeamAthletes)
                            {
                                <tr>
                                    <td>@athlete.Name</td>
                                    <td>@athlete.Position</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="col-6">
                    <h4 class="font-weight-bold">@homeTeam.Name</h4>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var athlete in visitorTeamAthletes)
                            {
                                <tr>
                                    <td>@athlete.Name</td>
                                    <td>@athlete.Position</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <hr />
        <div>
            <h4 class="font-weight-bold text-center">Events</h4>
            <br />
            <div class="row">
                <table class="table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Event Name</th>
                            <th>@homeTeam.Name Count</th>
                            <th>@visitorTeam.Name Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var stat in homeStats)
                        {
                            <tr>
                                <td><img src="@GenericUtils.GetImageUrl(stat.EventKey)" alt="@stat.EventName"></td>
                                <td>@stat.EventName</td>
                                <td>@stat.Count</td>
                                <td>@getVisitorTeamEventCount(stat.EventId)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private bool isLoading = true;
    private bool isEditing = false;

    private GameService gameService;
    private FavoritesService favoritesService;
    private Club homeTeam;
    private Club visitorTeam;
    private List<Athlete> homeTeamAthletes;
    private List<Athlete> visitorTeamAthletes;
    private List<GameEvent> homeTeamEvents = new List<GameEvent>();
    private List<GameEvent> visitorTeamEvents = new List<GameEvent>();
    private List<StatsTable> homeStats = new List<StatsTable>();
    private List<StatsTable> visitorStats = new List<StatsTable>();
    private Image homeTeamImage = new Image();
    private Image visitorTeamImage = new Image();
    private GameData gameData = new GameData();

    private void ToggleIsEditing() { isEditing = isEditing ? false : true; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Start(Id);
    }

    private async void Start(string gameId)
    {
        gameService = new GameService(await localStorage.GetItemAsync<string>(ConstValues.TOKEN));
        favoritesService = new FavoritesService(await localStorage.GetItemAsync<string>(ConstValues.TOKEN));

        gameData = await gameService.GetGameDataById(int.Parse(gameId));
        homeTeam = gameData.Clubs[0];
        visitorTeam = gameData.Clubs[1];

        homeTeamAthletes = gameData.Athletes.Where(a => a.ClubId == homeTeam.Id).ToList();
        visitorTeamAthletes = gameData.Athletes.Where(a => a.ClubId == visitorTeam.Id).ToList();

        foreach (GameEvent evt in gameData.GameEvents)
        {
            foreach (Athlete athlete in homeTeamAthletes)
            {
                if (evt.AthleteId == athlete.Id)
                {
                    homeTeamEvents.Add(evt);
                }
            }

            foreach (Athlete athlete in visitorTeamAthletes)
            {
                if (evt.AthleteId == athlete.Id)
                {
                    visitorTeamEvents.Add(evt);
                }
            }
        }

        homeTeamImage = new Image { ImageUrl = GenericUtils.GetDisplayOptionFromDictionary(homeTeam.DisplayOptions, "imageUrl", "/images/athlete_fill-BLUE.svg") };
        visitorTeamImage = new Image { ImageUrl = GenericUtils.GetDisplayOptionFromDictionary(visitorTeam.DisplayOptions, "imageUrl", "/images/athlete_fill-BLUE.svg") };

        await LoadStatistics(gameData.Game.Id);

        isLoading = false;
        base.StateHasChanged();
    }

    private int getVisitorTeamEventCount(int eventId)
    {
        if (visitorStats.Count != 0)
        {
            return visitorStats.Where(c => c.EventId == eventId).FirstOrDefault().Count;
        }

        return 0;
    }

    private void ClubDetails(int id)
    {
        navigationManager.NavigateTo($"/clubs/{id}");
    }

    private async Task LoadStatistics(int gameId)
    {
        var statistics = await gameService.GetGameStatistics(gameId);
        var events = await new RestUtils(await localStorage.GetItemAsync<string>(ConstValues.TOKEN)).GetEvents(null);

        if (statistics != null)
        {
            foreach (Event e in events)
            {
                foreach (ClubStat stat in statistics)
                {
                    if (stat.EventId == e.Id)
                    {
                        if (homeTeam.Id == stat.ClubId)
                        {
                            homeStats.Add(new StatsTable(stat, e));
                        }
                        else if (visitorTeam.Id == stat.ClubId)
                        {
                            visitorStats.Add(new StatsTable(stat, e));
                        }
                    }
                }
            }
        }
    }

    private async Task SaveClicked()
    {
        var response = await gameService.UpdateGame(gameData.Game);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Success, "Game updated");
            isEditing = false;
        }
        else
        {
            toastService.ShowToast(ToastLevel.Error, ConstValues.MSG_GENERIC_ERROR);
        }
    }

    private async Task DeleteClicked()
    {
        var response = await gameService.DeleteGame(int.Parse(Id));

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Success, "Game deleted");
            Task.Delay(3000).Wait();
            navigationManager.NavigateTo($"/games");
        }
        else
        {
            toastService.ShowToast(ToastLevel.Error, ConstValues.MSG_GENERIC_ERROR);
        }
    }

    private async Task ToogleFavorite()
    {
        var response = await favoritesService.ToogleFavorite(new Favorite(int.Parse(Id)));

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Success, ConstValues.MSG_GENERIC_UPDATED);
            isEditing = false;
        }
        else
        {
            toastService.ShowToast(ToastLevel.Error, ConstValues.MSG_GENERIC_ERROR);
        }
    }
}
