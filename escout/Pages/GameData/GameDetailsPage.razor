
@page "/games/{id}"

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
<div class="container-fluid">
    <div class="row">
        <div class="col-10">
            <h3></h3>
        </div>
        <div class="col-2">
            @if (!isEditing)
            {
                <button class="btn btn-info" @onclick="ToogleFavorite">Favorite</button>
                <button class="btn btn-dark" @onclick="ToggleIsEditing">Edit</button>
                <button class="btn btn-danger" @onclick="DeleteClicked">Delete</button>
            }
            else
            {
                <button class="btn btn-dark" @onclick="ToggleIsEditing">Cancel</button>
                <button class="btn btn-success" @onclick="SaveClicked">Save</button>
            }
        </div>
    </div>
    <div class="row text-center">
        <div class="col-lg-3 justify-content-center">
            <img class="bg-transparent img-thumbnail" src="@(homeTeamImage.ImageUrl)" alt="@(homeTeamImage.Img)" style="height:80%;" />
            <h4 class="font-weight-bold">@homeTeam.Name</h4>
            <h4 class="font-weight-bold">@gameData.game.HomeScore</h4>
        </div>
        <div class="col-lg-3 justify-content-center">
            <h4 class="font-weight-bold">Game Details</h4>
            <div class="row">
                <div class="col-6">
                    <h6>Type:</h6>
                    <h6>Status:</h6>
                    <h6>Location:</h6>
                    <br />
                    <h6>Time Start:</h6>
                    <h6>Time End:</h6>
                    <br />
                    <h6>Home Score:</h6>
                    <h6>Visitor Score:</h6>
                </div>
                <div class="col-6">
                    @if (!isEditing)
                    {
                        <h6 class="text-info">@gameData.game.Type</h6>
                        <h6 class="text-info">@gameData.game.Status</h6>
                        <h6 class="text-info">@gameData.game.Location</h6>
                        <br />
                        <h6 class="text-info">@gameData.game.TimeStart</h6>
                        <h6 class="text-info">@gameData.game.TimeEnd</h6>
                        <br />
                        <h6 class="text-info">@gameData.game.HomeScore</h6>
                        <h6 class="text-info">@gameData.game.VisitorScore</h6>
                    }
                    else
                    {
                        <input @bind-value="gameData.game.Type" />
                        <input @bind-value="gameData.game.Status" />
                        <input @bind-value="gameData.game.Location" />
                        <br />
                        <input @bind-value="gameData.game.TimeStart" />
                        <input @bind-value="gameData.game.TimeEnd" />
                        <br />
                        <input @bind-value="gameData.game.HomeScore" />
                        <input @bind-value="gameData.game.VisitorScore" />
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-3 justify-content-center">
            <img class="bg-transparent img-thumbnail" src="@(visitorTeamImage.ImageUrl)" alt="@(visitorTeamImage.Img)" style="height:80%;" />
            <h4 class="font-weight-bold">@visitorTeam.Name</h4>
            <h4 class="font-weight-bold">@gameData.game.VisitorScore</h4>
        </div>
    </div>
    <hr />
    <div>
        <h4 class="font-weight-bold text-center">Athletes</h4>
        <br />
        <div class="row">
            <div class="col-6">
                <h4 class="font-weight-bold">@homeTeam.Name</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Position</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var athlete in homeTeamAthletes)
                        {
                            <tr>
                                <td>@athlete.Name</td>
                                <td>@athlete.Position</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-6">
                <h4 class="font-weight-bold">@homeTeam.Name</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Position</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var athlete in visitorTeamAthletes)
                        {
                            <tr>
                                <td>@athlete.Name</td>
                                <td>@athlete.Position</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <hr />
    <div>
        <h4 class="font-weight-bold text-center">Events</h4>
        <br />
        <div class="row">
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Event Name</th>
                        <th>@homeTeam.Name Count</th>
                        <th>@visitorTeam.Name Count</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stat in homeStats)
                    {
                        <tr>
                            <td><img src="@Utils.GetImageUrl(stat.eventKey)" alt="@stat.eventName"></td>
                            <td>@stat.eventName</td>
                            <td>@stat.count</td>
                            <td>@getEventCount(stat.eventId)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private bool isLoading = false;
    private bool isEditing = false;

    private GameService gameService;
    private FavoritesService favoritesService;
    private Club homeTeam;
    private Club visitorTeam;
    private List<Athlete> homeTeamAthletes;
    private List<Athlete> visitorTeamAthletes;
    private List<GameEvent> homeTeamEvents = new List<GameEvent>();
    private List<GameEvent> visitorTeamEvents = new List<GameEvent>();
    private List<StatsTable> homeStats = new List<StatsTable>();
    private List<StatsTable> visitorStats = new List<StatsTable>();
    private Image homeTeamImage = new Image();
    private Image visitorTeamImage = new Image();
    private GameData gameData = new GameData();

    private void ToggleIsEditing() { isEditing = isEditing ? false : true; }

    protected override Task OnInitializedAsync()
    {
        _ = Start(Id);
        return base.OnInitializedAsync();
    }

    private async Task Start(string gameId)
    {
        isLoading = true;
        gameService = new GameService(await localStorage.GetItemAsync<string>(Utils.TOKEN));
        favoritesService = new FavoritesService(await localStorage.GetItemAsync<string>(Utils.TOKEN));
        gameData = await gameService.GetGameDataById(int.Parse(gameId));

        homeTeam = gameData.clubs[0];
        visitorTeam = gameData.clubs[1];
        homeTeamAthletes = gameData.athletes.Where(a => a.ClubId == homeTeam.Id).ToList();
        visitorTeamAthletes = gameData.athletes.Where(a => a.ClubId == visitorTeam.Id).ToList();

        foreach (GameEvent evt in gameData.gameEvents)
        {
            foreach (Athlete athlete in homeTeamAthletes)
                if (evt.AthleteId == athlete.Id)
                    homeTeamEvents.Add(evt);

            foreach (Athlete athlete in visitorTeamAthletes)
                if (evt.AthleteId == athlete.Id)
                    visitorTeamEvents.Add(evt);
        }

        if (gameData.clubs[0].ImageId != null)
            homeTeamImage = await new RestUtils(await localStorage.GetItemAsync<string>(Utils.TOKEN)).GetImage(gameData.clubs[0].ImageId);
        else
            homeTeamImage = new Image { ImageUrl = "/images/club_fill-BLUE.svg" };
        if (gameData.clubs[1].ImageId != null)
            visitorTeamImage = await new RestUtils(await localStorage.GetItemAsync<string>(Utils.TOKEN)).GetImage(gameData.clubs[1].ImageId);
        else
            visitorTeamImage = new Image { ImageUrl = "/images/club_fill-BLUE.svg" };

        await LoadStatistics(gameData.game.Id);

        isLoading = false;
        base.StateHasChanged();
    }

    private int getEventCount(int eventId)
    {
        if(visitorStats.Count != 0)
            return visitorStats.Where(c => c.eventId == eventId).FirstOrDefault().count;
        return 0;
    }

    private void ClubDetails(int id)
    {
        navigationManager.NavigateTo($"/clubs/{id}");
    }

    private async Task LoadStatistics(int gameId)
    {
        var statistics = await gameService.GetGameStatistics(gameId);
        List<Event> events = await new RestUtils(await localStorage.GetItemAsync<string>(Utils.TOKEN)).GetEvents(null);

        if (statistics != null)
        {
            foreach (Event e in events)
            {
                foreach (ClubStat stat in statistics)
                {
                    if (stat.eventId == e.Id)
                    {
                        if (homeTeam.Id == stat.clubId)
                            homeStats.Add(new StatsTable(stat, e));
                        else if(visitorTeam.Id == stat.clubId)
                            visitorStats.Add(new StatsTable(stat, e));
                    }
                }
            }
        }
    }

    private async Task SaveClicked()
    {
        var result = await gameService.UpdateGame(gameData.game);

        if (result.ErrorCode != 0)
            toastService.ShowToast(ToastLevel.Error,@<text>Error</text>);
        else
        {
            toastService.ShowToast(ToastLevel.Success, @<text>Game updated</text>);
            isEditing = false;
        }
    }
    
    private async Task DeleteClicked()
    {
        var result = await gameService.DeleteGame(gameData.game.Id);
        
        if (result.ErrorCode != 0)
            toastService.ShowToast(ToastLevel.Error, @<text>Error</text>);
        else
        {
            toastService.ShowToast(ToastLevel.Success, @<text>Game deleted</text>);
            Task.Delay(3000).Wait();
            navigationManager.NavigateTo($"/games");
        }
    }
    
    private async Task ToogleFavorite()
    {
        Favorite favorite = new Favorite();
        favorite.GameId = int.Parse(Id);
        var result = await favoritesService.ToogleFavorite(favorite);
        
        if (result.ErrorCode != 0)
            toastService.ShowToast(ToastLevel.Error,@<text>Error</text>);
        else
        {
            toastService.ShowToast(ToastLevel.Success, @<text>Updated</text>);
            isEditing = false;
        }
    }
}
