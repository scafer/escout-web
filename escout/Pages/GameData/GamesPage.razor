@page "/games"

<h3>Games</h3>

<EditForm Model="@searchQuery" OnValidSubmit="@SearchClicked">
    <div class="form-group row">
        <InputSelect @bind-Value="searchQuery.FieldName" class="form-control col-lg-2  m-1">
            <option value="">Select...</option>
            <option value="favorites">Favorites</option>
        </InputSelect>
        <InputText @bind-Value="searchQuery.Value" placeholder="Search..." class="form-control col-lg  m-1" />
        <button class="btn btn-primary col-lg-1  m-1" value="Save">Search</button>
        <button class="btn btn-primary col-lg-1  m-1" @onclick="NewGameClicked">New Game</button>
    </div>
</EditForm>
<br />

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Home Team</th>
                <th>Visitor Team</th>
                <th>Time Start</th>
                <th>Time End</th>
                <th>Home Score</th>
                <th>Visitor Score</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in gameWithClubs)
            {
                <tr>
                    <td>@game.game.Id</td>
                    <td>@game.homeClub.Name</td>
                    <td>@game.visitorClub.Name</td>
                    <td>@game.game.TimeStart</td>
                    <td>@game.game.TimeEnd</td>
                    <td>@game.game.HomeScore</td>
                    <td>@game.game.VisitorScore</td>
                    <td><button @onclick="@(() => GameDetails(game.game))" class="btn btn-secondary">+</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = false;
    private List<GameWithClubs> gameWithClubs;

    private GameService gamesService;
    private SearchQuery searchQuery = new SearchQuery();

    protected override Task OnInitializedAsync()
    {
        _ = Start();
        return base.OnInitializedAsync();
    }

    private async Task Start()
    {
        isLoading = true;
        gamesService = new GameService(await localStorage.GetItemAsync<string>(Utils.TOKEN));
        var games = await gamesService.SearchExecuted(null, null);

        gameWithClubs = new List<GameWithClubs>();

        foreach (var g in games)
        {
            var x = new GameWithClubs();
            x.game = g;
            x.homeClub = await RestUtils.GetClubName(await localStorage.GetItemAsync<string>(Utils.TOKEN), g.HomeId);
            x.visitorClub = await RestUtils.GetClubName(await localStorage.GetItemAsync<string>(Utils.TOKEN), g.VisitorId);
            gameWithClubs.Add(x);
        }

        gameWithClubs = gameWithClubs.OrderBy(c => c.game.Id).ToList();

        isLoading = false;
        base.StateHasChanged();
    }

    private async Task SearchClicked()
    {
        isLoading = true;
        var games = await gamesService.SearchExecuted(searchQuery.FieldName, searchQuery.Value);

        gameWithClubs = new List<GameWithClubs>();

        foreach (var g in games)
        {
            var x = new GameWithClubs
            {
                game = g,
                homeClub = await RestUtils.GetClubName(await localStorage.GetItemAsync<string>(Utils.TOKEN), g.HomeId),
                visitorClub = await RestUtils.GetClubName(await localStorage.GetItemAsync<string>(Utils.TOKEN), g.VisitorId)
            };
            gameWithClubs.Add(x);
        }

        gameWithClubs = gameWithClubs.OrderBy(c => c.game.Id).ToList();
        isLoading = false;
    }

    private void NewGameClicked() => Modal.Show<NewGamePage>("New Game");

    private void GameDetails(Game game)
    {
        navigationManager.NavigateTo($"/games/{game.Id}");
    }
}
