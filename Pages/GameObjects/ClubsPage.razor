@page "/clubs"

<h3>Clubs</h3>

<EditForm Model="@searchQuery" OnValidSubmit="@SearchClicked">
    <div class="form-group row g-1">
        <div class="col-md-2">
            <InputSelect @bind-Value="searchQuery.FieldName" class="form-select">
                <option value="">Select...</option>
                <option value="name">Name</option>
                <option value="fullname">Fullname</option>
                <option value="favorites">Favorites</option>
            </InputSelect>
        </div>
        <div class="col">
            <InputText @bind-Value="searchQuery.Value" placeholder="Search..." class="form-control"/>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" value="submit">Search</button>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="NewClubClicked">New</button>
        </div>
    </div>
</EditForm>

<br/>

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Fullname</th>
                <th>Country</th>
                <th>Founded</th>
                <th>Colors</th>
                <th>Details</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var club in clubs)
            {
                <tr>
                    <td>@club.Id</td>
                    <td>@club.Name</td>
                    <td>@club.Fullname</td>
                    <td>@club.Country</td>
                    <td>@club.Founded</td>
                    <td>@club.Colors</td>
                    <td>
                        <button @onclick="@(() => ClubDetails(club))" class="btn btn-secondary">+</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private bool isLoading = true;
    private List<Club> clubs;
    private ClubService clubService;
    private readonly SearchQuery searchQuery = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Start();
    }

    private async void Start()
    {
        clubService = new ClubService(await localStorage.GetItemAsync<string>(ConstValues.TOKEN));
        clubs = await clubService.SearchExecuted(null, null);
        clubs = clubs.OrderBy(c => c.Id).ToList();

        isLoading = false;
        StateHasChanged();
    }

    private async Task SearchClicked()
    {
        isLoading = true;
        clubs = await clubService.SearchExecuted(searchQuery.FieldName, searchQuery.Value);
        clubs = clubs.OrderBy(c => c.Id).ToList();
        isLoading = false;
    }

    private void NewClubClicked()
    {
        Modal.Show<NewClubPage>(string.Format(ConstValues.MSG_GENERIC_OBJECT_NEW, "Club"));
    }

    private void ClubDetails(Club club)
    {
        navigationManager.NavigateTo($"/clubs/{club.Id}");
    }

}