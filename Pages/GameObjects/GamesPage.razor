@page "/games"

<h3>Games</h3>

<EditForm Model="@searchQuery" OnValidSubmit="@SearchClicked">
    <div class="form-group row g-1">
        <div class="col-md-2">
            <InputSelect @bind-Value="searchQuery.FieldName" class="form-select">
                <option value="">Select...</option>
                <option value="favorites">Favorites</option>
            </InputSelect>
        </div>
        <div class="col">
            <InputText @bind-Value="searchQuery.Value" placeholder="Search..." class="form-control"/>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" value="submit">Search</button>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="NewGameClicked">New</button>
        </div>
    </div>
</EditForm>

<br/>

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
            <tr>
                <th>#</th>
                <th>Home Team</th>
                <th>Visitor Team</th>
                <th>Time Start</th>
                <th>Time End</th>
                <th>Home Score</th>
                <th>Visitor Score</th>
                <th>Details</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var game in games)
            {
                <tr>
                    <td>@game.Id</td>
                    <td>@game.DisplayOptions.GetValueOrDefault("homeName")</td>
                    <td>@game.DisplayOptions.GetValueOrDefault("visitorName")</td>
                    <td>@game.TimeStart</td>
                    <td>@game.TimeEnd</td>
                    <td>@game.HomeScore</td>
                    <td>@game.VisitorScore</td>
                    <td>
                        <button @onclick="@(() => GameDetails(game))" class="btn btn-secondary">+</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private bool isLoading = true;
    private List<Game> games = new();
    private GameService gamesService;
    private readonly SearchQuery searchQuery = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Start();
    }

    private async void Start()
    {
        gamesService = new GameService(await localStorage.GetItemAsync<string>(ConstValues.TOKEN));
        games = await gamesService.SearchExecuted(null, null);
        games.OrderBy(c => c.Id).ToList();

        isLoading = false;
        StateHasChanged();
    }

    private async Task SearchClicked()
    {
        isLoading = true;
        var games = await gamesService.SearchExecuted(searchQuery.FieldName, searchQuery.Value);
        games.OrderBy(c => c.Id).ToList();
        isLoading = false;
    }

    private void NewGameClicked()
    {
        Modal.Show<NewGamePage>(string.Format(ConstValues.MSG_GENERIC_OBJECT_NEW, "game"));
    }

    private void GameDetails(Game game)
    {
        navigationManager.NavigateTo($"/games/{game.Id}");
    }

}